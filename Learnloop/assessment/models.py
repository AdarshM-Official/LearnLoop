from django.db import models
from django.conf import settings # Use settings.AUTH_USER_MODEL for user ForeignKey

# Assuming Python is the target language for the code assessment
# For multi-language support, this would require a more complex setup.

class CodeChallenge(models.Model):
    """Defines a specific coding challenge for users to attempt."""
    language = models.CharField(max_length=20, default='Python')
    title = models.CharField(max_length=255)
    description = models.TextField()
    
    # Stores the expected output or test cases as JSON (not used in this simplified demo)
    test_cases = models.JSONField(default=list) 

    def __str__(self):
        return self.title

class CodeSubmission(models.Model):
    """Stores the user's submitted code and the ML assessment results."""
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL, 
        on_delete=models.CASCADE, 
        related_name='code_submissions'
    )
    challenge = models.ForeignKey(CodeChallenge, on_delete=models.CASCADE)
    code_snippet = models.TextField()
    submitted_at = models.DateTimeField(auto_now_add=True)

    # ML & Execution Results
    execution_status = models.CharField(max_length=50, default='PENDING', 
        choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), 
                 ('SUCCESS', 'Success'), ('FAILED', 'Failed'), ('ERROR', 'Code Error')])
    
    # ML Features extracted from the code (e.g., complexity metrics)
    ml_features = models.JSONField(default=dict) 
    
    # The final ML prediction score (0.0 - 1.0, 1.0 being Senior level)
    seniority_score = models.FloatField(null=True, blank=True) 
    
    # Qualitative feedback generated by the task/LLM
    feedback = models.TextField(null=True, blank=True)

    def __str__(self):
        return f"{self.user.username}'s submission for {self.challenge.title}"
